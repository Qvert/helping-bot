import os

from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from art import *

from database.method_database import UsersData
from handlers.loading_music import post_music, get_name_music, load_music
from handlers.plan_schedule import welcome_message, get_button_text_city, get_button_text_time_zone, city_input_user
from handlers.post_review import review, review_get_text
from handlers.search_method import get_text_search, post_get_search
from handlers.translate import post_quastion_language, get_language_user, get_text_translate
from handlers.weather import weather, get_weather_text
from keyboard import keyboard_review
from state_class.class_state import Weather, Review, GetNameMusic, TranslateClass, SearchEthernet, Scheduler_plan

# Connected to bot
bot = Bot(token=os.environ['BOT_TOKEN'])
dis = Dispatcher(bot, storage=MemoryStorage())

# Connected to database
db = UsersData()


@dis.message_handler(commands='start')
async def test_message(message: types.Message):
    if message.from_user.id not in db.get_data_base(data='id_user'):
        db.insert_data_to_base(data='id_user', value=message.from_user.id)

    await message.answer('–•–∞–πüëã ! –Ø Assistant, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ç–µ–º —á—Ç–æ —è –º–æ–≥—É.\n'
                         '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ üßê –∏–ª–∏ —á—Ç–æ —è –º–æ–≥—É üòã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /help',
                         reply_markup=keyboard_review)


@dis.message_handler(commands='help')
async def welcome_message_start(message: types.Message):
    await message.answer('–≠—Ç–æ–º—É –±–æ—Ç—É –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n'
                         '–í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã: /weather\n'
                         '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º: /plan\n'
                         '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤: /translate\n'
                         '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π: /search\n'
                         '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º—É–∑—ã–∫—É: /music')


@dis.message_handler(Text(equals='‚ùå –û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard_review)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–∞
'''@dis.message_handler(commands='random')
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∂–º–∏ –º–µ–Ω—è', callback_data='random_value'))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dis.callback_query_handler(text='random_value')
async def send_random_value(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer(str(random.randint(0, 10)))'''


def register_hundlers(dis: Dispatcher):
    dis.register_message_handler(weather, commands='weather', state='*')
    dis.register_message_handler(get_weather_text, state=Weather.get_weather_place)
    dis.register_message_handler(review, Text(equals='üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨', ignore_case=True), state='*')
    dis.register_message_handler(review_get_text, state=Review.waiting_text_review)
    dis.register_message_handler(get_name_music, commands='music', state='*')
    dis.register_message_handler(post_music, state=GetNameMusic.music_name)
    dis.register_message_handler(load_music, state=GetNameMusic.url_music)
    dis.register_message_handler(post_quastion_language, commands='translate', state='*')
    dis.register_message_handler(get_language_user, state=TranslateClass.get_from_language)
    dis.register_message_handler(get_text_translate, state=TranslateClass.get_text_translate)
    dis.register_message_handler(get_text_search, commands='search', state='*')
    dis.register_message_handler(post_get_search, state=SearchEthernet.text_search)
    dis.register_message_handler(welcome_message, commands='plan', state='*')
    dis.register_message_handler(get_button_text_city, Text(equals='üèô –í–≤–µ—Å—Ç–∏ –º–æ–π –≥–æ—Ä–æ–¥', ignore_case=True), state='*')
    dis.register_message_handler(get_button_text_time_zone, Text(equals='‚å® –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É',
                                                                 ignore_case=True), state='*')
    dis.register_message_handler(city_input_user, state=Scheduler_plan.get_name_city)


if __name__ == '__main__':
    tprint('coffee stain', font='random')
    # set_commands(dis)
    register_hundlers(dis)
    executor.start_polling(dis, skip_updates=True)
