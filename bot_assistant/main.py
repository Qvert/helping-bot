import asyncio
import os

from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from art import *

from handlers.loading_music import post_music, get_name_music, load_music
from handlers.plan_schedule import welcome_message, get_button_text_city, get_button_text_time_zone, city_input_user, \
    get_text_input_user, get_plan_to_user_, post_reminder_time
from handlers.post_review import review, review_get_text
from handlers.search_method import get_text_search, post_get_search
from handlers.translate import post_quastion_language, get_language_user, get_text_translate
from handlers.weather import weather, get_weather_text
from keyboard import keyboard_review
from state_class.class_state import Weather, Review, GetNameMusic, TranslateClass, SearchEthernet, Scheduler_plan
from bot_assistant.database.method_database import UsersData


# Connected to bot
bot = Bot(token=os.environ['BOT_TOKEN'])
dis = Dispatcher(bot, storage=MemoryStorage())


db = UsersData()


@dis.message_handler(commands='start')
async def test_message(message: types.Message):
    if message.from_user.id not in db.get_data_base(data='id_user', id_us=message.from_user.id):
        db.insert_data_to_base(data='id_user', value=message.from_user.id)

    await message.answer('–•–∞–πüëã ! –Ø Assistant, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —Ç–µ–º —á—Ç–æ —è –º–æ–≥—É.\n'
                         '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ üßê –∏–ª–∏ —á—Ç–æ —è –º–æ–≥—É üòã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /help',
                         reply_markup=keyboard_review)


@dis.message_handler(commands='help')
async def welcome_message_start(message: types.Message):
    await message.answer('‚¨á <b>–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞</b> ‚¨á\n\n'
                         '1. ‚õÖ <b>–§—É–Ω–∫—Ü–∏—è "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É": /weather.</b>\n'
                         '   <b>1.1.</b> –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Ç–∞–º, –≥–¥–µ –≤—ã\n'
                         '               –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ª–∏–±–æ –≥–æ—Ä–æ–¥, –ª–∏–±–æ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n\n'
                         '   <b>1.2.</b> –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å —É–∂–µ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.\n'
                         '               –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞.\n\n'
                         '2. üìî <b>–§—É–Ω–∫—Ü–∏—è "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫": /plan.</b>\n'
                         '   <b>2.1</b> –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π–∑–æ–∏—Ç–∏.\n'
                         '              –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Ç–æ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è\n\n'
                         '   <b>2.2</b> –í–Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n'
                         '              –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n'
                         '              –ß—Ç–æ–±—ã –µ–≥–æ —É–∫–∞–∑–∞—Ç—å, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫\n'
                         '              (–£–∫–∞–∑–∞—Ç—å —Å–∞–º–æ–º—É, –ª–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)\n\n'
                         '   <b>2.3</b> –°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n'
                         '              [–°–æ–±—ã—Ç–∏–µ] [–í—Ä–µ–º—è –≤ HH:MM] [–ö–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π–∑–æ–∏—Ç–∏(—Å–µ–≥–æ–¥–Ω—è, —á–µ—Ä–µ–∑ 2 –¥–Ω—è)]\n\n'
                         '   <b>2.4</b> –í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n'
                         '              –î–ª—è —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n'
                         '3. <b>–§—É–Ω–∫—Ü–∏—è "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫": /translate</b>\n', parse_mode=types.ParseMode.HTML)


@dis.message_handler(Text(equals='‚ùå –û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard_review)


# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–∞
'''@dis.message_handler(commands='random')
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∂–º–∏ –º–µ–Ω—è', callback_data='random_value'))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dis.callback_query_handler(text='random_value')
async def send_random_value(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer(str(random.randint(0, 10)))'''


def register_hundlers(dis: Dispatcher):
    dis.register_message_handler(weather, commands='weather', state='*')
    dis.register_message_handler(get_weather_text, state=Weather.get_weather_place)
    dis.register_message_handler(review, Text(equals='üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨', ignore_case=True), state='*')
    dis.register_message_handler(review_get_text, state=Review.waiting_text_review)
    dis.register_message_handler(get_name_music, commands='music', state='*')
    dis.register_message_handler(post_music, state=GetNameMusic.music_name)
    dis.register_message_handler(load_music, state=GetNameMusic.url_music)
    dis.register_message_handler(post_quastion_language, commands='translate', state='*')
    dis.register_message_handler(get_language_user, state=TranslateClass.get_from_language)
    dis.register_message_handler(get_text_translate, state=TranslateClass.get_text_translate)
    dis.register_message_handler(get_text_search, commands='search', state='*')
    dis.register_message_handler(post_get_search, state=SearchEthernet.text_search)
    dis.register_message_handler(welcome_message, commands='plan', state='*')
    dis.register_message_handler(get_button_text_city, Text(equals='üèô –í–≤–µ—Å—Ç–∏ –º–æ–π –≥–æ—Ä–æ–¥', ignore_case=True), state='*')
    dis.register_message_handler(get_button_text_time_zone, Text(equals='‚å® –ù–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É',
                                                                 ignore_case=True), state='*')
    dis.register_message_handler(city_input_user, state=Scheduler_plan.get_name_city)
    dis.register_message_handler(get_text_input_user, state=Scheduler_plan.time_zone_user)
    dis.register_message_handler(get_plan_to_user_, state=Scheduler_plan.get_plan_to_user)
    dis.register_message_handler(post_reminder_time, state=Scheduler_plan.reminder_time_user)


if __name__ == '__main__':
    tprint('coffee stain', font='random')
    # set_commands(dis)
    register_hundlers(dis)
    executor.start_polling(dis, skip_updates=True)

    from utils_.asyncio_polling import main
    asyncio.run(main())
