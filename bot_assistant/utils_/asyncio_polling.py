from __future__ import annotations
import datetime
from datetime import timedelta

import asyncio
import typing as ty

from aiogram import types
from aiogram.types import Message
from loguru import logger

from bot_assistant.utils_.class_error import DontWritePlan
from bot_assistant.database.ex_db import db


async def send_message(message: Message, time_rem: str, event: str, time_end: str) -> None:
    """
    :param message: Message
    :param time_rem: –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    :param event: –°–æ–±—ã—Ç–∏–µ
    :param time_end: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    :return:
    """
    time_end_str = time_end
    time_end_time = [int(el) for el in time_end_str[-1].split('.')]

    time_end_datetime = datetime.datetime(year=int(time_end_str[0]), month=int(time_end_str[1]),
                                          day=int(time_end_str[2]),
                                          hour=time_end_time[0], minute=time_end_time[1])
    logger.info(f'Time end: {time_end_datetime}')

    date_now = datetime.datetime.today()
    date_now += timedelta(hours=int(db.get_data_base(data='time_zone',
                                                     id_us=message.from_user.id)[0][0][1]))
    logger.info(f'Date now bot: {date_now}')

    while True:
        await asyncio.sleep(int(time_rem))
        await message.answer(f'üì¢ <b>–ù–∞–ø–æ–º–∏–Ω–∞—é</b>, —á—Ç–æ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event}\n'
                             f'<b>–î–∞—Ç–∞ —Å–≤–µ—Ä—à–µ–Ω–∏—è:</b> {time_end}', parse_mode=types.ParseMode.HTML)

        if (time_end_datetime - date_now).total_seconds() < 0:
            await message.answer(f'–£–¥–∞–ª—è—é —Å–æ–±—ã—Ç–∏–µ: {event}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ —Å–≤–µ—Ä—à–∏–ª–æ—Å—å')
            break


async def main() -> ty.NoReturn:
    while True:
        await asyncio.gather()


async def pooling(message: Message, time_rem: str, event: str, time_end: str) -> None:
    try:
        if time_rem and event is not None:
            asyncio.create_task(send_message(message=message, time_rem=time_rem, event=event, time_end=time_end))
            await message.answer('–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)')

    except DontWritePlan as err:
        logger.error(err)
        await message.answer('–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Å–ª—É—á–∏–ª–∞—Å—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞(')


