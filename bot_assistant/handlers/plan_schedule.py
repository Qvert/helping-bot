import asyncio
import datetime
import re

from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from loguru import logger

from bot_assistant.keyboard import keyboard_plan
from bot_assistant.state_class.class_state import Scheduler_plan
from bot_assistant.utils_.class_error import NoTimeUser
from bot_assistant.database.method_database import UsersData
from bot_assistant.utils_.dict_get import dict_plan_number_time, dict_plan_number_time_week, dict_next_day
from bot_assistant.utils_.selenium_parse import get_time_zone

db = UsersData()


async def welcome_message(message: Message):
    await message.answer(f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫\n'
                         f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n'
                         f'–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')

    await message.answer(f'üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n'
                         f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: +00:00', reply_markup=keyboard_plan)


async def get_button_text_city(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –Ω–∏–º')
    await Scheduler_plan.get_name_city.set()


async def city_input_user(message: Message, state: FSMContext):
    await message.answer('–°–µ–π—á–∞—Å –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ.')
    zone_time = get_time_zone(text_city := message.text)
    if zone_time is None:
        await message.reply('–û–π üòü, –∫–∞–∂–µ—Ç—Å—è –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–π –≥–æ—Ä–æ–¥–∞.')
        return

    logger.debug(f'{text_city}: time_zone {zone_time}')

    db.update_data_base(data='time_zone', value=zone_time[3:5], id_us=message.from_user.id)

    logger.debug('Update zone_time succsefull')
    await message.answer(f'–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {zone_time}')
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
    await asyncio.sleep(2)
    await message.answer(f'–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏–µ, –∞ –ø–æ—Ç–æ–º ')
    await state.finish()


async def get_button_text_time_zone(message: Message):
    await message.answer('‚ö† –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –≤–≤–µ–¥–µ–Ω–∏—é —á–∞—Å–æ–≤–≥–æ –ø–æ—è—Å–∞!!! ‚ö†\n'
                         '1. –í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 00:00 –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±H:00.\n'
                         '2. –ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–∞ —Å–∞–π—Ç–µ https://www.timeserver.ru\n'
                         '3. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: —É –ú–æ—Å–∫–≤—ã –±—É–¥–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –æ—Ç–Ω–æc–∏—Ç–µ–ª—å–Ω–æ 00:00, +3:00\n'
                         '–£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ üëã')

    await Scheduler_plan.time_zone_user.set()


async def get_text_input_user(message: Message, state: FSMContext):
    text_input_user = message.text

    logger.info(f'Input text user: {text_input_user}')

    db.update_data_base(data='time_zone', value=text_input_user, id_us=message.from_user.id)
    logger.debug('Update zone_time succsefull')
    await message.answer(f'–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {text_input_user}')
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞')
    await asyncio.sleep(2)
    await message.answer(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø–∏—Å—å —Ç–∏–ø–∞:\n'
                         f'[–°–æ–±—ã—Ç–∏–µ] [–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM] [–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ]')
    await Scheduler_plan.get_plan_to_user.set()


async def get_plan_to_user_(message: Message):
    """
    :param message: –û–±—Ä–∞–±–æ—Ç–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    :return: –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    """
    text_user = message.text
    logger.debug(f'Text plan for user {text_user}')
    try:
        time_user = re.search(r'\d\d:\d\d', text_user)[0]
        if time_user is None:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏')
            raise NoTimeUser

        split_text_user = text_user.split(time_user)
        logger.info(f'{split_text_user = }\n'
                    f'{time_user = }')

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–ª—É—á–∏—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª\–µ–ª—è
        db.update_data_base(data='event', value=split_text_user[0], id_us=message.from_user.id)
        time_zone = db.get_data_base(data='time_zone', id_us=message.from_user.id)[0][0]
        logger.info(f'Get time user: {time_zone}')
        date_today = datetime.datetime.today()
        date_today += datetime.timedelta(hours=int(time_zone[1]))

        db.update_data_base(data='start_time', value=date_today.strftime("%Y-%m-%d-%H.%M.%S"),
                            id_us=message.from_user.id)
        logger.debug(f'Start from time: {date_today}')

        # –¢–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ
        text_end_time = split_text_user[1].strip()
        logger.info(f'Info end time: {text_end_time}')
        time_user_end = time_user.split(':')

        date_end_str = datetime.datetime(date_today.year, date_today.month, date_today.day,
                                         int(time_user_end[0]), int(time_user_end[1]))
        logger.info(f'{date_end_str = }')

        if '—á–µ—Ä–µ–∑' in text_end_time:
            split_char_time = text_end_time.split()[1:]
            logger.info(f'{split_char_time = }')

            number_time = split_char_time[0]
            logger.info(f'{number_time = }')
            # If user input day
            if len(number_days_or_week := split_char_time[-1]) == 3 or len(number_days_or_week) == 4:
                date_end_str = handler_time(date_end_str=date_end_str, number_time=number_time, days_week_month='day')

            elif len(number_days_or_week) == 6 and '–Ω–µ–¥–µ–ª' in number_days_or_week:
                date_end_str = handler_time(date_end_str=date_end_str, number_time=number_time, days_week_month='week')

            '''elif len(number_days_or_week) >= 5 and '–º–µ—Å—è—Ü' in number_days_or_week:
                date_end_str = handler_time(date_end_str=date_end_str, number_time=number_time, days_week_month='month')'''

        elif len(text_end_time.split()) == 1:
            date_end_str += datetime.timedelta(days=dict_next_day[text_end_time])

        db.update_data_base(data='end_time', value=date_end_str,
                            id_us=message.from_user.id)

    except NoTimeUser as err:
        logger.error(err)
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è')


def handler_time(number_time: str, date_end_str: datetime, days_week_month: str) -> str:
    """
    :param number_time: –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    :param date_end_str: –î–∞—Ç–∞, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ
    :param days_week_month: –£—Å–ª–æ–≤–∏–µ, —á–µ—Ä–µ–∑ –¥–µ–Ω—å, –º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å–æ–±—ã—Ç–∏–µ
    :return: –î–∞—Ç–∞, –∫–æ–≥–¥–∞ —Å–ª—É—á–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ
    """
    if days_week_month == 'day':
        if len(number_time) == 1:
            date_end_str += datetime.timedelta(days=int(number_time))
            return date_end_str.strftime("%Y-%m-%d-%H.%M.%S")
        else:
            date_end_str += datetime.timedelta(days=dict_plan_number_time[number_time])
            return date_end_str.strftime("%Y-%m-%d-%H.%M.%S")

    if days_week_month == 'week':
        if len(number_time) == 1:
            date_end_str += datetime.timedelta(weeks=int(number_time))
            return date_end_str.strftime("%Y-%m-%d-%H.%M.%S")
        else:
            date_end_str += datetime.timedelta(weeks=dict_plan_number_time_week[number_time])
            return date_end_str.strftime("%Y-%m-%d-%H.%M.%S")

    '''if days_week_month == 'month':
        if len(number_time) == 1:
            date_end_str += datetime.timedelta(=int(number_time))
            return date_end_str
        else:
            date_end_str += datetime.timedelta(weeks=dict_plan_number_time[number_time])
            return date_end_str
'''
